package autoLogin;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.HashMap;

class Key{
	int event_key_value;
	public boolean need_shift;
	public Key(int event_key_value, boolean need_shift) {
		super();
		this.event_key_value = event_key_value;
		this.need_shift = need_shift;
	}
}
public class AutoLog {
	public static HashMap<Character, Key> hashmap=charToKeyMap();
	public static void main(String[] args) throws AWTException {
		// TODO Auto-generated method stub
		Robot robot=new Robot();
		robot.mouseMove(700, 400);
		robot.mousePress(KeyEvent.BUTTON1_DOWN_MASK);
		robot.mouseRelease(KeyEvent.BUTTON1_DOWN_MASK);
		passwordInput(robot);

	}
	private static HashMap<Character, Key> charToKeyMap() {
		// TODO Auto-generated method stub
		HashMap<Character, Key> hashmap=new HashMap<Character, Key>();
		//ÌØÊâ×Ö·û
		Key k=new Key(KeyEvent.VK_2, true);
		hashmap.put('@', k);
		
		//ÆÕÍ¨×Ö·û
		Key k=new Key(KeyEvent.VK_A, true);
		hashmap.put('A', k);
		Key k=new Key(KeyEvent.VK_B, true);
		hashmap.put('B', k);
		Key k=new Key(KeyEvent.VK_C, true);
		hashmap.put('C', k);
		Key k=new Key(KeyEvent.VK_D, true);
		hashmap.put('D', k);
		Key k=new Key(KeyEvent.VK_E, true);
		hashmap.put('E', k);
		Key k=new Key(KeyEvent.VK_F, true);
		hashmap.put('F', k);
		Key k=new Key(KeyEvent.VK_G, true);
		hashmap.put('G', k);
		Key k=new Key(KeyEvent.VK_H, true);
		hashmap.put('H', k);
		Key k=new Key(KeyEvent.VK_I, true);
		hashmap.put('I', k);
		Key k=new Key(KeyEvent.VK_J, true);
		hashmap.put('J', k);
		Key k=new Key(KeyEvent.VK_K, true);
		hashmap.put('K', k);
		Key k=new Key(KeyEvent.VK_L, true);
		hashmap.put('L', k);
		Key k=new Key(KeyEvent.VK_M, true);
		hashmap.put('M', k);
		Key k=new Key(KeyEvent.VK_N, true);
		hashmap.put('N', k);
		Key k=new Key(KeyEvent.VK_O, true);
		hashmap.put('O', k);
		Key k=new Key(KeyEvent.VK_P, true);
		hashmap.put('P', k);
		Key k=new Key(KeyEvent.VK_Q, true);
		hashmap.put('Q', k);
		Key k=new Key(KeyEvent.VK_R, true);
		hashmap.put('R', k);
		Key k=new Key(KeyEvent.VK_S, true);
		hashmap.put('S', k);
		Key k=new Key(KeyEvent.VK_T, true);
		hashmap.put('T', k);
		Key k=new Key(KeyEvent.VK_U, true);
		hashmap.put('U', k);
		Key k=new Key(KeyEvent.VK_V, true);
		hashmap.put('V', k);
		Key k=new Key(KeyEvent.VK_W, true);
		hashmap.put('W', k);
		Key k=new Key(KeyEvent.VK_X, true);
		hashmap.put('X', k);
		Key k=new Key(KeyEvent.VK_Y, true);
		hashmap.put('Y', k);
		Key k=new Key(KeyEvent.VK_Z, true);
		hashmap.put('Z', k);
		Key k=new Key(KeyEvent.VK_A, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_B, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_C, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_D, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_E, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_F, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_G, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_H, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_I, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_J, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_K, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_L, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_M, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_N, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_O, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_P, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_Q, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_R, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_S, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_T, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_U, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_V, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_W, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_X, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_Y, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_Z, true);
		hashmap.put('a', k);
		Key k=new Key(KeyEvent.VK_0, true);
		hashmap.put('0', k);
		Key k=new Key(KeyEvent.VK_1, true);
		hashmap.put('1', k);
		Key k=new Key(KeyEvent.VK_2, true);
		hashmap.put('2', k);
		Key k=new Key(KeyEvent.VK_3, true);
		hashmap.put('3', k);
		Key k=new Key(KeyEvent.VK_4, true);
		hashmap.put('4', k);
		Key k=new Key(KeyEvent.VK_5, true);
		hashmap.put('5', k);
		Key k=new Key(KeyEvent.VK_6, true);
		hashmap.put('6', k);
		Key k=new Key(KeyEvent.VK_7, true);
		hashmap.put('7', k);
		Key k=new Key(KeyEvent.VK_8, true);
		hashmap.put('8', k);
		Key k=new Key(KeyEvent.VK_9, true);
		hashmap.put('9', k);
		
		return hashmap;
	}
	public static void passwordInput(Robot robot){
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		//ÊäÈëÃÜÂë
//		robot.keyPress(KeyEvent.VK_SHIFT);
//		robot.keyPress(KeyEvent.VK_C);
//		robot.keyRelease(KeyEvent.VK_SHIFT);
//		robot.keyRelease(KeyEvent.VK_C);
//		robot.keyPress(KeyEvent.VK_Z);
//		robot.keyRelease(KeyEvent.VK_Z);
//		robot.keyPress(KeyEvent.VK_B);
//		robot.keyRelease(KeyEvent.VK_B);
//		robot.keyPress(KeyEvent.VK_A);
//		robot.keyRelease(KeyEvent.VK_A);
//		robot.keyPress(KeyEvent.VK_N);
//		robot.keyRelease(KeyEvent.VK_N);
//		robot.keyPress(KeyEvent.VK_K);
//		robot.keyRelease(KeyEvent.VK_K);
//		robot.keyPress(KeyEvent.VK_SHIFT);
//		robot.keyPress(KeyEvent.VK_2);
//		robot.keyRelease(KeyEvent.VK_SHIFT);
//		robot.keyRelease(KeyEvent.VK_2);
//		robot.keyPress(KeyEvent.VK_3);
//		robot.keyRelease(KeyEvent.VK_3);
//		robot.keyPress(KeyEvent.VK_5);
//		robot.keyRelease(KeyEvent.VK_5);
		
		
	}
}
